#pragma once

#include <unordered_map>
#include <vector>
#include <utility>
#include <SFML/Graphics.hpp>
#include "Chunk.h"

// Hash ????? ???? ????? (cx, cy)
struct IntPairHash {
    std::size_t operator()(const std::pair<int, int>& p) const noexcept {
        // ????? ??? ?? ???? ????? ??64 ???
        // (upper 32 ??? = first, lower 32 ??? = second)
        std::uint64_t key = (static_cast<std::uint64_t>(p.first) << 32)
            ^ static_cast<std::uint64_t>(static_cast<int>(p.second));
        return std::hash<std::uint64_t>()(key);
    }
};

class ChunkManager {
public:
    ChunkManager();
    ~ChunkManager();

    // ????? ?? ????? ?? ????? ????? ??????
    void updateChunks(const sf::Vector2f& playerPos);

    // ???? ?? ???????? ???????
    void draw(sf::RenderTarget& target, const sf::View& view);

    // ????? ?? ?????????? ???? ????????
    void updateObjects(float dt);

private:
    // ??? ?????? ????? ??? ?? ???????? (cx, cy)
    Chunk* createChunk(int cx, int cy);

    // ??????? ?? ??????? ??????, ????? ??? (cx, cy)
    std::unordered_map<std::pair<int, int>, Chunk*, IntPairHash> chunks;

    // ??? ??????? ???? ???? ????? ??? ?????
    static constexpr int LOAD_RADIUS = 1;
};
